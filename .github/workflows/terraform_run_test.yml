name: 'Terraform Run Test'

on:
  workflow_dispatch: {}
  push:
    branches:
      - 'add_tests'

env:
  TF_WARN_OUTPUT_ERRORS: 1
  TF_CLI_ARGS: "-no-color"
  TF_INPUT: 0
  TF_VAR_gw_count: 2
  EXAMPLE_DIR: ./deploy/examples/se_demo
  TF_WORKSPACE: run_test
  AWS_REGION: ap-southeast-2
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

permissions:
  contents: read

jobs:
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest
    environment: test

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash
    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v3

    - name: Sets env vars for environment
      run: |
        echo "TF_VAR_artifacts_s3_bucket=0ed58e18-0c0c-11ed-861d-0242ac120003" >> $GITHUB_ENV
      if: github.ref != 'refs/heads/"master"'

    - name: Create terraform backend file
      run: |
        cat << EOF > $EXAMPLE_DIR/backend.tf
        terraform {
          backend "s3" {
            bucket         = "tf-state-dsfkit-github-tests"
            key            = "states/terraform.tfstate"
            dynamodb_table = "terraform-state-lock"
            region         = "ap-southeast-2"
          }
        }
        EOF

    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1
      with:
        terraform_wrapper: false

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      run: terraform -chdir=$EXAMPLE_DIR init

    - name: Terraform Validate
      run: terraform -chdir=$EXAMPLE_DIR validate

    # Generates an execution plan for Terraform
    - name: Terraform Plan
      run: terraform -chdir=$EXAMPLE_DIR plan -lock-timeout=1800s

    - name: Cleaning envrionment
      run: terraform -chdir=$EXAMPLE_DIR destroy -auto-approve -lock-timeout=1800s
      
    - name: Terraform Apply
      run: terraform -chdir=$EXAMPLE_DIR apply -auto-approve -lock-timeout=1800s

    - name: Terraform Output
      run: |
        terraform -chdir=$EXAMPLE_DIR output
        terraform -chdir=$EXAMPLE_DIR output dsf_hubs_public_ip
        terraform -chdir=$EXAMPLE_DIR output dsf_hubs_key_pair_filename
        echo hub_ip=$(terraform -chdir=$EXAMPLE_DIR output dsf_hubs_public_ip) >> $GITHUB_ENV
        echo hub_key_pair_filename=$EXAMPLE_DIR/$(terraform -chdir=$EXAMPLE_DIR output dsf_hubs_key_pair_filename) >> $GITHUB_ENV
        echo hub_key_pair=$EXAMPLE_DIR/$(terraform -chdir=$EXAMPLE_DIR output dsf_private_ssh_key) >> $GITHUB_ENV

    - name: Get Environment Variables
      run: |
        echo hub_ip: ${{ env.hub_ip }}
        echo hub_key_pair_filename: ${{ env.hub_key_pair_filename }}
        echo hub_key_pair: ${{ env.hub_key_pair }}
        ll ./deploy/examples/se_demo/ssh_keys
    
    - name: Check SSH Connectivity 1
      if: always()
      run: eval "$(terraform -chdir=$EXAMPLE_DIR output ssh_command_hub)"

    - name: Check SSH Connectivity 2
      if: always()
      uses: appleboy/ssh-action@v0.1.6
      with:
        host: ${{ env.hub_ip }}
        username: ec2-user
        key: ${{ env.hub_key_pair }}
        port: 22
        script: whoami

    - name: Terraform Destroy
      # if: always()
      run: terraform -chdir=$EXAMPLE_DIR destroy -auto-approve -lock-timeout=1800s