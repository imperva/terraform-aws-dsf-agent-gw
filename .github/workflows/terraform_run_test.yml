name: 'Terraform Run Test'

on:
  workflow_dispatch: {}
  push:
    branches:
      - 'add_tests'

env:
  TF_WARN_OUTPUT_ERRORS: 1
  TF_CLI_ARGS: "-no-color"
  TF_INPUT: 0
  TF_VAR_gw_count: 1
  EXAMPLE_DIR: ./deploy/examples/se_demo
  TF_WORKSPACE: run_test
  AWS_REGION: ap-southeast-2
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

permissions:
  contents: read

jobs:
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest
    environment: test

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash
    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v3

    - name: Sets env vars for environment
      run: |
        echo "TF_VAR_artifacts_s3_bucket=0ed58e18-0c0c-11ed-861d-0242ac120003" >> $GITHUB_ENV
      if: github.ref != 'refs/heads/"master"'

    - name: Create terraform backend file
      run: |
        cat << EOF > $EXAMPLE_DIR/backend.tf
        terraform {
          backend "s3" {
            bucket         = "tf-state-dsfkit-github-tests"
            key            = "states/terraform.tfstate"
            dynamodb_table = "terraform-state-lock"
            region         = "ap-southeast-2"
          }
        }
        EOF

    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1
      with:
        terraform_wrapper: false

    - name: Setup jq
      uses: sergeysova/jq-action@v2
      with:
        cmd: jq -n env

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      run: terraform -chdir=$EXAMPLE_DIR init

    - name: Terraform Validate
      run: terraform -chdir=$EXAMPLE_DIR validate

    # Generates an execution plan for Terraform
    - name: Terraform Plan
      run: terraform -chdir=$EXAMPLE_DIR plan -lock-timeout=1800s

    - name: Cleaning envrionment
      run: terraform -chdir=$EXAMPLE_DIR destroy -auto-approve -lock-timeout=1800s
      
    - name: Terraform Apply
      run: terraform -chdir=$EXAMPLE_DIR apply -auto-approve -lock-timeout=1800s

    - name: Set Environment Variables
      run: |
        echo hub_ip=$(terraform -chdir=$EXAMPLE_DIR output -json | jq .dsf_hubs.value.primary_hub.public_address) >> $GITHUB_ENV
        echo hub_key_pair=$(terraform -chdir=$EXAMPLE_DIR output -json | jq .dsf_private_ssh_key.value.content) >> $GITHUB_ENV
        echo ssh_command=$(terraform -chdir=$EXAMPLE_DIR output -json | jq .dsf_hubs.value.primary_hub.ssh_command) >> $GITHUB_ENV
        echo dsf_ssh_key_file_name=$EXAMPLE_DIR/$(terraform -chdir=$EXAMPLE_DIR output dsf_private_ssh_key_file_name) >> $GITHUB_ENV

    - name: Get Environment Variables
      if: always()
      run: |
        terraform -chdir=$EXAMPLE_DIR output
        echo hub_ip: ${{ env.hub_ip }}
        echo hub_key_pair: ${{ env.hub_key_pair }}
        echo dsf_ssh_key_file_name: ${{ env.dsf_ssh_key_file_name }}
        echo ssh_command: ${{ env.ssh_command }}

    - name: Check SSH Connectivity appleboy
      if: always()
      uses: appleboy/ssh-action@v0.1.6
      with:
        host: ${{ env.hub_ip }}
        username: ec2-user
        key: ${{ env.dsf_ssh_key_file_name }}
        port: 22
        script: whoami

    - name: ssh-scp-ssh-pipelines cross-the-world
      if: always()
      # You may pin to the exact commit or the version.
      uses: cross-the-world/ssh-scp-ssh-pipelines@v1.1.4
      with:
        # ssh remote host
        host: ${{ env.hub_ip }}
        # ssh remote port
        port: 22
        # ssh remote user
        user: ec2-user
        # content of ssh private key. ex raw content of ~/.ssh/id_rsa
        key: ${{ env.dsf_ssh_key_file_name }}
        last_ssh: whoami

    - name: Check SSH Connectivity
      if: always()
      run: | 
        cd $EXAMPLE_DIR
        pwd
        ${{ env.ssh_command }}

    - name: Terraform Destroy
      # if: always()
      run: terraform -chdir=$EXAMPLE_DIR destroy -auto-approve -lock-timeout=1800s