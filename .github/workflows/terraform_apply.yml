name: 'Terraform Apply (simple)'

on:
  schedule:
    - cron: '0 23 * * *'
  workflow_dispatch: {}
  push:
    branches:
      - 'master'
      - 'dev'
  pull_request:
    types:
      - 'opened'
      - 'reopened'
    branches:
      - 'master'
      - 'dev'

env:
  TF_WARN_OUTPUT_ERRORS: 1
  TF_WORKSPACE: dsfkit-ci-cd
  TF_CLI_ARGS: "-no-color"
  TF_INPUT: 0

permissions:
  contents: read

jobs:
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest
    environment: test

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v3

    - name: Sets env vars for environment
      run: |
        echo "TF_VAR_tarball_s3_bucket=0ed58e18-0c0c-11ed-861d-0242ac120003" >> $GITHUB_ENV
      if: github.ref != 'refs/heads/"master"'

    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1
      with:
        cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

    - name: Setup jq
      uses: sergeysova/jq-action@v2
      with:
        cmd: jq -n env

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      run: terraform init

    - name: Terraform Validate
      run: terraform validate

    # Checks that all Terraform configuration files adhere to a canonical format
    - name: Terraform Format
      run: terraform fmt -check
      continue-on-error: true

    # Generates an execution plan for Terraform
    - name: Terraform Plan
      run: terraform plan

      # On push to "main", build or change infrastructure according to Terraform configuration files
      # Note: It is recommended to set up a required "strict" status check in your repository for "Terraform Cloud". See the documentation on "strict" required status checks for more information: https://help.github.com/en/github/administering-a-repository/types-of-required-status-checks
    - name: Terraform Apply
      # if: github.ref == 'refs/heads/"master"' && github.event_name == 'push' || github.event_name == 'workflow_dispatch'
      run: terraform apply -auto-approve

    - name: Terraform Output
      run: terraform output

    - name: Set Environment Variables
      run: |
        echo hub_ip=$(terraform output -json | jq -r '.dsf_hubs.value.primary_hub.public_address') >> $GITHUB_ENV
        echo gw_ip=$(terraform output -json | jq -r '.dsf_agentless_gw_group.value."gw-0".private_address') >> $GITHUB_ENV
        echo dsf_ssh_key_file_name=$(terraform output -json | jq -r '.dsf_private_ssh_key_file_name.value') >> $GITHUB_ENV

    # Test the ssh connectivity to the Hub and GW, it checks both of them because the connection to the GW is allowed from the Hub only via proxy
    - name: Check SSH Connectivity
      uses: appleboy/ssh-action@v0.1.6
      with:
        proxy_host: ${{ env.hub_ip }}
        proxy_username: ec2-user
        proxy_key_path: ${{ env.dsf_ssh_key_file_name }}
        proxy_port: 22
        host: ${{ env.gw_ip }}
        username: ec2-user
        key_path: ${{ env.dsf_ssh_key_file_name }}
        port: 22
        script: ifconfig | grep -Eo 'inet (addr:)?([0-9]*\.){3}[0-9]*' | grep -Eo '([0-9]*\.){3}[0-9]*' | grep -v '127.0.0.1'

    - name: Terraform Destroy
      if: always()
      run: terraform destroy -auto-approve
